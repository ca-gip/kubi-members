// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	cagipv1 "github.com/ca-gip/kubi-members/pkg/apis/ca-gip/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeProjectMemberses implements ProjectMembersInterface
type FakeProjectMemberses struct {
	Fake *FakeCagipV1
	ns   string
}

var projectmembersesResource = schema.GroupVersionResource{Group: "cagip.github.com", Version: "v1", Resource: "projectmemberses"}

var projectmembersesKind = schema.GroupVersionKind{Group: "cagip.github.com", Version: "v1", Kind: "ProjectMember"}

// Get takes name of the projectMembers, and returns the corresponding projectMembers object, and an error if there is any.
func (c *FakeProjectMemberses) Get(name string, options v1.GetOptions) (result *cagipv1.ProjectMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(projectmembersesResource, c.ns, name), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}

// List takes label and field selectors, and returns the list of ProjectMemberses that match those selectors.
func (c *FakeProjectMemberses) List(opts v1.ListOptions) (result *cagipv1.ProjectMembersList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(projectmembersesResource, projectmembersesKind, c.ns, opts), &cagipv1.ProjectMembersList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &cagipv1.ProjectMembersList{ListMeta: obj.(*cagipv1.ProjectMembersList).ListMeta}
	for _, item := range obj.(*cagipv1.ProjectMembersList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested projectMemberses.
func (c *FakeProjectMemberses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(projectmembersesResource, c.ns, opts))

}

// Create takes the representation of a projectMembers and creates it.  Returns the server's representation of the projectMembers, and an error, if there is any.
func (c *FakeProjectMemberses) Create(projectMembers *cagipv1.ProjectMember) (result *cagipv1.ProjectMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(projectmembersesResource, c.ns, projectMembers), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}

// Update takes the representation of a projectMembers and updates it. Returns the server's representation of the projectMembers, and an error, if there is any.
func (c *FakeProjectMemberses) Update(projectMembers *cagipv1.ProjectMember) (result *cagipv1.ProjectMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(projectmembersesResource, c.ns, projectMembers), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeProjectMemberses) UpdateStatus(projectMembers *cagipv1.ProjectMember) (*cagipv1.ProjectMember, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(projectmembersesResource, "status", c.ns, projectMembers), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}

// Delete takes name of the projectMembers and deletes it. Returns an error if one occurs.
func (c *FakeProjectMemberses) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(projectmembersesResource, c.ns, name), &cagipv1.ProjectMember{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeProjectMemberses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(projectmembersesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &cagipv1.ProjectMembersList{})
	return err
}

// Patch applies the patch and returns the patched projectMembers.
func (c *FakeProjectMemberses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *cagipv1.ProjectMember, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(projectmembersesResource, c.ns, name, pt, data, subresources...), &cagipv1.ProjectMember{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ProjectMember), err
}
